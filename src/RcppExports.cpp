// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// BFOC
Rcpp::List BFOC(const arma::field<arma::vec> y_obs, const arma::field<arma::vec> t_obs, const double n_funct, const int K, const int P, const int M, const int tot_mcmc_iters, const arma::field<arma::vec> t_star, const double nu_1, const double rho, const double alpha_3, const double alpha1l, const double alpha2l, const double beta1l, const double beta2l, const double var_epsilon1, const double var_epsilon2, const double alpha, const double beta, const double alpha_0, const double beta_0);
RcppExport SEXP _BayesFOC_BFOC(SEXP y_obsSEXP, SEXP t_obsSEXP, SEXP n_functSEXP, SEXP KSEXP, SEXP PSEXP, SEXP MSEXP, SEXP tot_mcmc_itersSEXP, SEXP t_starSEXP, SEXP nu_1SEXP, SEXP rhoSEXP, SEXP alpha_3SEXP, SEXP alpha1lSEXP, SEXP alpha2lSEXP, SEXP beta1lSEXP, SEXP beta2lSEXP, SEXP var_epsilon1SEXP, SEXP var_epsilon2SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP alpha_0SEXP, SEXP beta_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type y_obs(y_obsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type t_obs(t_obsSEXP);
    Rcpp::traits::input_parameter< const double >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type P(PSEXP);
    Rcpp::traits::input_parameter< const int >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type t_star(t_starSEXP);
    Rcpp::traits::input_parameter< const double >::type nu_1(nu_1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_3(alpha_3SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha1l(alpha1lSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha2l(alpha2lSEXP);
    Rcpp::traits::input_parameter< const double >::type beta1l(beta1lSEXP);
    Rcpp::traits::input_parameter< const double >::type beta2l(beta2lSEXP);
    Rcpp::traits::input_parameter< const double >::type var_epsilon1(var_epsilon1SEXP);
    Rcpp::traits::input_parameter< const double >::type var_epsilon2(var_epsilon2SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_0(alpha_0SEXP);
    Rcpp::traits::input_parameter< const double >::type beta_0(beta_0SEXP);
    rcpp_result_gen = Rcpp::wrap(BFOC(y_obs, t_obs, n_funct, K, P, M, tot_mcmc_iters, t_star, nu_1, rho, alpha_3, alpha1l, alpha2l, beta1l, beta2l, var_epsilon1, var_epsilon2, alpha, beta, alpha_0, beta_0));
    return rcpp_result_gen;
END_RCPP
}
// BFOC_SS
Rcpp::List BFOC_SS(const arma::mat known_Z, const arma::field<arma::vec> y_obs, const arma::field<arma::vec> t_obs, const double n_funct, const int K, const int P, const int M, const int tot_mcmc_iters, const int r_stored_iters, const arma::field<arma::vec> t_star, const double nu_1, const double rho, const double alpha_3, const double alpha1l, const double alpha2l, const double beta1l, const double beta2l, const double var_epsilon1, const double var_epsilon2, const double alpha, const double beta, const double alpha_0, const double beta_0, const std::string directory, const arma::cube Phi1);
RcppExport SEXP _BayesFOC_BFOC_SS(SEXP known_ZSEXP, SEXP y_obsSEXP, SEXP t_obsSEXP, SEXP n_functSEXP, SEXP KSEXP, SEXP PSEXP, SEXP MSEXP, SEXP tot_mcmc_itersSEXP, SEXP r_stored_itersSEXP, SEXP t_starSEXP, SEXP nu_1SEXP, SEXP rhoSEXP, SEXP alpha_3SEXP, SEXP alpha1lSEXP, SEXP alpha2lSEXP, SEXP beta1lSEXP, SEXP beta2lSEXP, SEXP var_epsilon1SEXP, SEXP var_epsilon2SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP alpha_0SEXP, SEXP beta_0SEXP, SEXP directorySEXP, SEXP Phi1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type known_Z(known_ZSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type y_obs(y_obsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type t_obs(t_obsSEXP);
    Rcpp::traits::input_parameter< const double >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type P(PSEXP);
    Rcpp::traits::input_parameter< const int >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const int >::type r_stored_iters(r_stored_itersSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type t_star(t_starSEXP);
    Rcpp::traits::input_parameter< const double >::type nu_1(nu_1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_3(alpha_3SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha1l(alpha1lSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha2l(alpha2lSEXP);
    Rcpp::traits::input_parameter< const double >::type beta1l(beta1lSEXP);
    Rcpp::traits::input_parameter< const double >::type beta2l(beta2lSEXP);
    Rcpp::traits::input_parameter< const double >::type var_epsilon1(var_epsilon1SEXP);
    Rcpp::traits::input_parameter< const double >::type var_epsilon2(var_epsilon2SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_0(alpha_0SEXP);
    Rcpp::traits::input_parameter< const double >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const std::string >::type directory(directorySEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Phi1(Phi1SEXP);
    rcpp_result_gen = Rcpp::wrap(BFOC_SS(known_Z, y_obs, t_obs, n_funct, K, P, M, tot_mcmc_iters, r_stored_iters, t_star, nu_1, rho, alpha_3, alpha1l, alpha2l, beta1l, beta2l, var_epsilon1, var_epsilon2, alpha, beta, alpha_0, beta_0, directory, Phi1));
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateZ
Rcpp::List TestUpdateZ();
RcppExport SEXP _BayesFOC_TestUpdateZ() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateZ());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdatePi
Rcpp::List TestUpdatePi();
RcppExport SEXP _BayesFOC_TestUpdatePi() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdatePi());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdatePhi
Rcpp::List TestUpdatePhi();
RcppExport SEXP _BayesFOC_TestUpdatePhi() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdatePhi());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateDelta
Rcpp::List TestUpdateDelta();
RcppExport SEXP _BayesFOC_TestUpdateDelta() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateDelta());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateA
Rcpp::List TestUpdateA();
RcppExport SEXP _BayesFOC_TestUpdateA() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateA());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateGamma
Rcpp::List TestUpdateGamma();
RcppExport SEXP _BayesFOC_TestUpdateGamma() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateGamma());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateNu
Rcpp::List TestUpdateNu();
RcppExport SEXP _BayesFOC_TestUpdateNu() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateNu());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateTau
Rcpp::List TestUpdateTau();
RcppExport SEXP _BayesFOC_TestUpdateTau() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateTau());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateSigma
Rcpp::List TestUpdateSigma();
RcppExport SEXP _BayesFOC_TestUpdateSigma() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateSigma());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateChi
Rcpp::List TestUpdateChi();
RcppExport SEXP _BayesFOC_TestUpdateChi() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateChi());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateYStar
Rcpp::List TestUpdateYStar();
RcppExport SEXP _BayesFOC_TestUpdateYStar() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateYStar());
    return rcpp_result_gen;
END_RCPP
}
// TestBFOC
Rcpp::List TestBFOC(int tot_mcmc_iters);
RcppExport SEXP _BayesFOC_TestBFOC(SEXP tot_mcmc_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(TestBFOC(tot_mcmc_iters));
    return rcpp_result_gen;
END_RCPP
}
// TestBFOC_SS
Rcpp::List TestBFOC_SS(int tot_mcmc_iters, const std::string directory, const int r_stored_iters);
RcppExport SEXP _BayesFOC_TestBFOC_SS(SEXP tot_mcmc_itersSEXP, SEXP directorySEXP, SEXP r_stored_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const std::string >::type directory(directorySEXP);
    Rcpp::traits::input_parameter< const int >::type r_stored_iters(r_stored_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(TestBFOC_SS(tot_mcmc_iters, directory, r_stored_iters));
    return rcpp_result_gen;
END_RCPP
}
// TestReadMat
arma::mat TestReadMat(std::string directory);
RcppExport SEXP _BayesFOC_TestReadMat(SEXP directorySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type directory(directorySEXP);
    rcpp_result_gen = Rcpp::wrap(TestReadMat(directory));
    return rcpp_result_gen;
END_RCPP
}
// TestReadCube
arma::cube TestReadCube(std::string directory);
RcppExport SEXP _BayesFOC_TestReadCube(SEXP directorySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type directory(directorySEXP);
    rcpp_result_gen = Rcpp::wrap(TestReadCube(directory));
    return rcpp_result_gen;
END_RCPP
}
// TestReadField
arma::field<arma::cube> TestReadField(std::string directory);
RcppExport SEXP _BayesFOC_TestReadField(SEXP directorySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type directory(directorySEXP);
    rcpp_result_gen = Rcpp::wrap(TestReadField(directory));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesFOC_BFOC", (DL_FUNC) &_BayesFOC_BFOC, 21},
    {"_BayesFOC_BFOC_SS", (DL_FUNC) &_BayesFOC_BFOC_SS, 25},
    {"_BayesFOC_TestUpdateZ", (DL_FUNC) &_BayesFOC_TestUpdateZ, 0},
    {"_BayesFOC_TestUpdatePi", (DL_FUNC) &_BayesFOC_TestUpdatePi, 0},
    {"_BayesFOC_TestUpdatePhi", (DL_FUNC) &_BayesFOC_TestUpdatePhi, 0},
    {"_BayesFOC_TestUpdateDelta", (DL_FUNC) &_BayesFOC_TestUpdateDelta, 0},
    {"_BayesFOC_TestUpdateA", (DL_FUNC) &_BayesFOC_TestUpdateA, 0},
    {"_BayesFOC_TestUpdateGamma", (DL_FUNC) &_BayesFOC_TestUpdateGamma, 0},
    {"_BayesFOC_TestUpdateNu", (DL_FUNC) &_BayesFOC_TestUpdateNu, 0},
    {"_BayesFOC_TestUpdateTau", (DL_FUNC) &_BayesFOC_TestUpdateTau, 0},
    {"_BayesFOC_TestUpdateSigma", (DL_FUNC) &_BayesFOC_TestUpdateSigma, 0},
    {"_BayesFOC_TestUpdateChi", (DL_FUNC) &_BayesFOC_TestUpdateChi, 0},
    {"_BayesFOC_TestUpdateYStar", (DL_FUNC) &_BayesFOC_TestUpdateYStar, 0},
    {"_BayesFOC_TestBFOC", (DL_FUNC) &_BayesFOC_TestBFOC, 1},
    {"_BayesFOC_TestBFOC_SS", (DL_FUNC) &_BayesFOC_TestBFOC_SS, 3},
    {"_BayesFOC_TestReadMat", (DL_FUNC) &_BayesFOC_TestReadMat, 1},
    {"_BayesFOC_TestReadCube", (DL_FUNC) &_BayesFOC_TestReadCube, 1},
    {"_BayesFOC_TestReadField", (DL_FUNC) &_BayesFOC_TestReadField, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesFOC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
