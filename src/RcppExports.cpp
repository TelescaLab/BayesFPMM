// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// BFPMM
Rcpp::List BFPMM(const arma::field<arma::vec>& y_obs, const arma::field<arma::vec>& t_obs, const double& n_funct, const int& thinning_num, const int& K, const int& P, const int& M, const int& tot_mcmc_iters, const int& r_stored_iters, const arma::vec& c, const double& b, const double& nu_1, const double& alpha1l, const double& alpha2l, const double& beta1l, const double& beta2l, const double& a_Z_PM, const double& a_pi_PM, const double& var_alpha3, const double& var_epsilon1, const double& var_epsilon2, const double& alpha, const double& beta, const double& alpha_0, const double& beta_0, const std::string directory);
RcppExport SEXP _BayesFPMM_BFPMM(SEXP y_obsSEXP, SEXP t_obsSEXP, SEXP n_functSEXP, SEXP thinning_numSEXP, SEXP KSEXP, SEXP PSEXP, SEXP MSEXP, SEXP tot_mcmc_itersSEXP, SEXP r_stored_itersSEXP, SEXP cSEXP, SEXP bSEXP, SEXP nu_1SEXP, SEXP alpha1lSEXP, SEXP alpha2lSEXP, SEXP beta1lSEXP, SEXP beta2lSEXP, SEXP a_Z_PMSEXP, SEXP a_pi_PMSEXP, SEXP var_alpha3SEXP, SEXP var_epsilon1SEXP, SEXP var_epsilon2SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP alpha_0SEXP, SEXP beta_0SEXP, SEXP directorySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type y_obs(y_obsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type t_obs(t_obsSEXP);
    Rcpp::traits::input_parameter< const double& >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const int& >::type thinning_num(thinning_numSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const int& >::type r_stored_iters(r_stored_itersSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu_1(nu_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha1l(alpha1lSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha2l(alpha2lSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta1l(beta1lSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta2l(beta2lSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_Z_PM(a_Z_PMSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_pi_PM(a_pi_PMSEXP);
    Rcpp::traits::input_parameter< const double& >::type var_alpha3(var_alpha3SEXP);
    Rcpp::traits::input_parameter< const double& >::type var_epsilon1(var_epsilon1SEXP);
    Rcpp::traits::input_parameter< const double& >::type var_epsilon2(var_epsilon2SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha_0(alpha_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const std::string >::type directory(directorySEXP);
    rcpp_result_gen = Rcpp::wrap(BFPMM(y_obs, t_obs, n_funct, thinning_num, K, P, M, tot_mcmc_iters, r_stored_iters, c, b, nu_1, alpha1l, alpha2l, beta1l, beta2l, a_Z_PM, a_pi_PM, var_alpha3, var_epsilon1, var_epsilon2, alpha, beta, alpha_0, beta_0, directory));
    return rcpp_result_gen;
END_RCPP
}
// BFPMM_Templadder
Rcpp::List BFPMM_Templadder(const arma::field<arma::vec>& y_obs, const arma::field<arma::vec>& t_obs, const double& n_funct, const int& K, const int& P, const int& M, const int& tot_mcmc_iters, const int& r_stored_iters, const arma::vec& c, const double& b, const double& nu_1, const double& alpha1l, const double& alpha2l, const double& beta1l, const double& beta2l, const double& a_Z_PM, const double& a_pi_PM, const double& var_alpha3, const double& var_epsilon1, const double& var_epsilon2, const double& alpha, const double& beta, const double& alpha_0, const double& beta_0, const double& beta_N_t, const int& N_t);
RcppExport SEXP _BayesFPMM_BFPMM_Templadder(SEXP y_obsSEXP, SEXP t_obsSEXP, SEXP n_functSEXP, SEXP KSEXP, SEXP PSEXP, SEXP MSEXP, SEXP tot_mcmc_itersSEXP, SEXP r_stored_itersSEXP, SEXP cSEXP, SEXP bSEXP, SEXP nu_1SEXP, SEXP alpha1lSEXP, SEXP alpha2lSEXP, SEXP beta1lSEXP, SEXP beta2lSEXP, SEXP a_Z_PMSEXP, SEXP a_pi_PMSEXP, SEXP var_alpha3SEXP, SEXP var_epsilon1SEXP, SEXP var_epsilon2SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP alpha_0SEXP, SEXP beta_0SEXP, SEXP beta_N_tSEXP, SEXP N_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type y_obs(y_obsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type t_obs(t_obsSEXP);
    Rcpp::traits::input_parameter< const double& >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const int& >::type r_stored_iters(r_stored_itersSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu_1(nu_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha1l(alpha1lSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha2l(alpha2lSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta1l(beta1lSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta2l(beta2lSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_Z_PM(a_Z_PMSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_pi_PM(a_pi_PMSEXP);
    Rcpp::traits::input_parameter< const double& >::type var_alpha3(var_alpha3SEXP);
    Rcpp::traits::input_parameter< const double& >::type var_epsilon1(var_epsilon1SEXP);
    Rcpp::traits::input_parameter< const double& >::type var_epsilon2(var_epsilon2SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha_0(alpha_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_N_t(beta_N_tSEXP);
    Rcpp::traits::input_parameter< const int& >::type N_t(N_tSEXP);
    rcpp_result_gen = Rcpp::wrap(BFPMM_Templadder(y_obs, t_obs, n_funct, K, P, M, tot_mcmc_iters, r_stored_iters, c, b, nu_1, alpha1l, alpha2l, beta1l, beta2l, a_Z_PM, a_pi_PM, var_alpha3, var_epsilon1, var_epsilon2, alpha, beta, alpha_0, beta_0, beta_N_t, N_t));
    return rcpp_result_gen;
END_RCPP
}
// BFPMM_MTT
Rcpp::List BFPMM_MTT(const arma::field<arma::vec>& y_obs, const arma::field<arma::vec>& t_obs, const double& n_funct, const int& thinning_num, const int& K, const int& P, const int& M, const int& tot_mcmc_iters, const int& r_stored_iters, const int& n_temp_trans, const arma::vec& c, const double& b, const double& nu_1, const double& alpha1l, const double& alpha2l, const double& beta1l, const double& beta2l, const double& a_Z_PM, const double& a_pi_PM, const double& var_alpha3, const double& var_epsilon1, const double& var_epsilon2, const double& alpha, const double& beta, const double& alpha_0, const double& beta_0, const std::string directory, const double& beta_N_t, const int& N_t);
RcppExport SEXP _BayesFPMM_BFPMM_MTT(SEXP y_obsSEXP, SEXP t_obsSEXP, SEXP n_functSEXP, SEXP thinning_numSEXP, SEXP KSEXP, SEXP PSEXP, SEXP MSEXP, SEXP tot_mcmc_itersSEXP, SEXP r_stored_itersSEXP, SEXP n_temp_transSEXP, SEXP cSEXP, SEXP bSEXP, SEXP nu_1SEXP, SEXP alpha1lSEXP, SEXP alpha2lSEXP, SEXP beta1lSEXP, SEXP beta2lSEXP, SEXP a_Z_PMSEXP, SEXP a_pi_PMSEXP, SEXP var_alpha3SEXP, SEXP var_epsilon1SEXP, SEXP var_epsilon2SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP alpha_0SEXP, SEXP beta_0SEXP, SEXP directorySEXP, SEXP beta_N_tSEXP, SEXP N_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type y_obs(y_obsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type t_obs(t_obsSEXP);
    Rcpp::traits::input_parameter< const double& >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const int& >::type thinning_num(thinning_numSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const int& >::type r_stored_iters(r_stored_itersSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_temp_trans(n_temp_transSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu_1(nu_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha1l(alpha1lSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha2l(alpha2lSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta1l(beta1lSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta2l(beta2lSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_Z_PM(a_Z_PMSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_pi_PM(a_pi_PMSEXP);
    Rcpp::traits::input_parameter< const double& >::type var_alpha3(var_alpha3SEXP);
    Rcpp::traits::input_parameter< const double& >::type var_epsilon1(var_epsilon1SEXP);
    Rcpp::traits::input_parameter< const double& >::type var_epsilon2(var_epsilon2SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha_0(alpha_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const std::string >::type directory(directorySEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_N_t(beta_N_tSEXP);
    Rcpp::traits::input_parameter< const int& >::type N_t(N_tSEXP);
    rcpp_result_gen = Rcpp::wrap(BFPMM_MTT(y_obs, t_obs, n_funct, thinning_num, K, P, M, tot_mcmc_iters, r_stored_iters, n_temp_trans, c, b, nu_1, alpha1l, alpha2l, beta1l, beta2l, a_Z_PM, a_pi_PM, var_alpha3, var_epsilon1, var_epsilon2, alpha, beta, alpha_0, beta_0, directory, beta_N_t, N_t));
    return rcpp_result_gen;
END_RCPP
}
// BFPMM_Nu_Z
Rcpp::List BFPMM_Nu_Z(const arma::field<arma::vec>& y_obs, const arma::field<arma::vec>& t_obs, const double& n_funct, const int& K, const int& P, const int& M, const int& tot_mcmc_iters, const arma::vec& c, const double& b, const double& nu_1, const double& alpha1l, const double& alpha2l, const double& beta1l, const double& beta2l, const double& a_Z_PM, const double& a_pi_PM, const double& var_alpha3, const double& var_epsilon1, const double& var_epsilon2, const double& alpha, const double& beta, const double& alpha_0, const double& beta_0);
RcppExport SEXP _BayesFPMM_BFPMM_Nu_Z(SEXP y_obsSEXP, SEXP t_obsSEXP, SEXP n_functSEXP, SEXP KSEXP, SEXP PSEXP, SEXP MSEXP, SEXP tot_mcmc_itersSEXP, SEXP cSEXP, SEXP bSEXP, SEXP nu_1SEXP, SEXP alpha1lSEXP, SEXP alpha2lSEXP, SEXP beta1lSEXP, SEXP beta2lSEXP, SEXP a_Z_PMSEXP, SEXP a_pi_PMSEXP, SEXP var_alpha3SEXP, SEXP var_epsilon1SEXP, SEXP var_epsilon2SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP alpha_0SEXP, SEXP beta_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type y_obs(y_obsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type t_obs(t_obsSEXP);
    Rcpp::traits::input_parameter< const double& >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu_1(nu_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha1l(alpha1lSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha2l(alpha2lSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta1l(beta1lSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta2l(beta2lSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_Z_PM(a_Z_PMSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_pi_PM(a_pi_PMSEXP);
    Rcpp::traits::input_parameter< const double& >::type var_alpha3(var_alpha3SEXP);
    Rcpp::traits::input_parameter< const double& >::type var_epsilon1(var_epsilon1SEXP);
    Rcpp::traits::input_parameter< const double& >::type var_epsilon2(var_epsilon2SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha_0(alpha_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_0(beta_0SEXP);
    rcpp_result_gen = Rcpp::wrap(BFPMM_Nu_Z(y_obs, t_obs, n_funct, K, P, M, tot_mcmc_iters, c, b, nu_1, alpha1l, alpha2l, beta1l, beta2l, a_Z_PM, a_pi_PM, var_alpha3, var_epsilon1, var_epsilon2, alpha, beta, alpha_0, beta_0));
    return rcpp_result_gen;
END_RCPP
}
// BFPMM_Theta
Rcpp::List BFPMM_Theta(const arma::field<arma::vec>& y_obs, const arma::field<arma::vec>& t_obs, const double& n_funct, const int& K, const int& P, const int& M, const int& tot_mcmc_iters, const arma::vec& c, const double& b, const double& nu_1, const double& alpha1l, const double& alpha2l, const double& beta1l, const double& beta2l, const double& a_Z_PM, const double& a_pi_PM, const double& var_alpha3, const double& var_epsilon1, const double& var_epsilon2, const double& alpha, const double& beta, const double& alpha_0, const double& beta_0, const arma::mat& Z_est, const arma::mat& nu_est);
RcppExport SEXP _BayesFPMM_BFPMM_Theta(SEXP y_obsSEXP, SEXP t_obsSEXP, SEXP n_functSEXP, SEXP KSEXP, SEXP PSEXP, SEXP MSEXP, SEXP tot_mcmc_itersSEXP, SEXP cSEXP, SEXP bSEXP, SEXP nu_1SEXP, SEXP alpha1lSEXP, SEXP alpha2lSEXP, SEXP beta1lSEXP, SEXP beta2lSEXP, SEXP a_Z_PMSEXP, SEXP a_pi_PMSEXP, SEXP var_alpha3SEXP, SEXP var_epsilon1SEXP, SEXP var_epsilon2SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP alpha_0SEXP, SEXP beta_0SEXP, SEXP Z_estSEXP, SEXP nu_estSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type y_obs(y_obsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type t_obs(t_obsSEXP);
    Rcpp::traits::input_parameter< const double& >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu_1(nu_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha1l(alpha1lSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha2l(alpha2lSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta1l(beta1lSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta2l(beta2lSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_Z_PM(a_Z_PMSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_pi_PM(a_pi_PMSEXP);
    Rcpp::traits::input_parameter< const double& >::type var_alpha3(var_alpha3SEXP);
    Rcpp::traits::input_parameter< const double& >::type var_epsilon1(var_epsilon1SEXP);
    Rcpp::traits::input_parameter< const double& >::type var_epsilon2(var_epsilon2SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha_0(alpha_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z_est(Z_estSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type nu_est(nu_estSEXP);
    rcpp_result_gen = Rcpp::wrap(BFPMM_Theta(y_obs, t_obs, n_funct, K, P, M, tot_mcmc_iters, c, b, nu_1, alpha1l, alpha2l, beta1l, beta2l, a_Z_PM, a_pi_PM, var_alpha3, var_epsilon1, var_epsilon2, alpha, beta, alpha_0, beta_0, Z_est, nu_est));
    return rcpp_result_gen;
END_RCPP
}
// BFPMM_MTT_warm_start
Rcpp::List BFPMM_MTT_warm_start(const arma::field<arma::vec>& y_obs, const arma::field<arma::vec>& t_obs, const double& n_funct, const int& thinning_num, const int& K, const int& P, const int& M, const int& tot_mcmc_iters, const int& r_stored_iters, const int& n_temp_trans, const arma::vec& c, const double& b, const double& nu_1, const double& alpha1l, const double& alpha2l, const double& beta1l, const double& beta2l, const double& a_Z_PM, const double& a_pi_PM, const double& var_alpha3, const double& var_epsilon1, const double& var_epsilon2, const double& alpha, const double& beta, const double& alpha_0, const double& beta_0, const std::string directory, const double& beta_N_t, const int& N_t, const arma::mat& Z_est, const arma::vec& pi_est, const double& alpha_3_est, const arma::vec& delta_est, const arma::cube& gamma_est, const arma::cube& Phi_est, const arma::vec& A_est, const arma::mat& nu_est, const arma::vec& tau_est, const double& sigma_est, const arma::mat& chi_est);
RcppExport SEXP _BayesFPMM_BFPMM_MTT_warm_start(SEXP y_obsSEXP, SEXP t_obsSEXP, SEXP n_functSEXP, SEXP thinning_numSEXP, SEXP KSEXP, SEXP PSEXP, SEXP MSEXP, SEXP tot_mcmc_itersSEXP, SEXP r_stored_itersSEXP, SEXP n_temp_transSEXP, SEXP cSEXP, SEXP bSEXP, SEXP nu_1SEXP, SEXP alpha1lSEXP, SEXP alpha2lSEXP, SEXP beta1lSEXP, SEXP beta2lSEXP, SEXP a_Z_PMSEXP, SEXP a_pi_PMSEXP, SEXP var_alpha3SEXP, SEXP var_epsilon1SEXP, SEXP var_epsilon2SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP alpha_0SEXP, SEXP beta_0SEXP, SEXP directorySEXP, SEXP beta_N_tSEXP, SEXP N_tSEXP, SEXP Z_estSEXP, SEXP pi_estSEXP, SEXP alpha_3_estSEXP, SEXP delta_estSEXP, SEXP gamma_estSEXP, SEXP Phi_estSEXP, SEXP A_estSEXP, SEXP nu_estSEXP, SEXP tau_estSEXP, SEXP sigma_estSEXP, SEXP chi_estSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type y_obs(y_obsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type t_obs(t_obsSEXP);
    Rcpp::traits::input_parameter< const double& >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const int& >::type thinning_num(thinning_numSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const int& >::type r_stored_iters(r_stored_itersSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_temp_trans(n_temp_transSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu_1(nu_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha1l(alpha1lSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha2l(alpha2lSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta1l(beta1lSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta2l(beta2lSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_Z_PM(a_Z_PMSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_pi_PM(a_pi_PMSEXP);
    Rcpp::traits::input_parameter< const double& >::type var_alpha3(var_alpha3SEXP);
    Rcpp::traits::input_parameter< const double& >::type var_epsilon1(var_epsilon1SEXP);
    Rcpp::traits::input_parameter< const double& >::type var_epsilon2(var_epsilon2SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha_0(alpha_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const std::string >::type directory(directorySEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_N_t(beta_N_tSEXP);
    Rcpp::traits::input_parameter< const int& >::type N_t(N_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z_est(Z_estSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pi_est(pi_estSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha_3_est(alpha_3_estSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta_est(delta_estSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type gamma_est(gamma_estSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Phi_est(Phi_estSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type A_est(A_estSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type nu_est(nu_estSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau_est(tau_estSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_est(sigma_estSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type chi_est(chi_estSEXP);
    rcpp_result_gen = Rcpp::wrap(BFPMM_MTT_warm_start(y_obs, t_obs, n_funct, thinning_num, K, P, M, tot_mcmc_iters, r_stored_iters, n_temp_trans, c, b, nu_1, alpha1l, alpha2l, beta1l, beta2l, a_Z_PM, a_pi_PM, var_alpha3, var_epsilon1, var_epsilon2, alpha, beta, alpha_0, beta_0, directory, beta_N_t, N_t, Z_est, pi_est, alpha_3_est, delta_est, gamma_est, Phi_est, A_est, nu_est, tau_est, sigma_est, chi_est));
    return rcpp_result_gen;
END_RCPP
}
// rdirichlet
arma::vec rdirichlet(arma::vec alpha);
RcppExport SEXP _BayesFPMM_rdirichlet(SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(rdirichlet(alpha));
    return rcpp_result_gen;
END_RCPP
}
// calc_lB
double calc_lB(const arma::vec& alpha);
RcppExport SEXP _BayesFPMM_calc_lB(SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_lB(alpha));
    return rcpp_result_gen;
END_RCPP
}
// LabelSwitch
arma::mat LabelSwitch(arma::mat& Z_ref, arma::mat& Z, const arma::mat& perm_mat);
RcppExport SEXP _BayesFPMM_LabelSwitch(SEXP Z_refSEXP, SEXP ZSEXP, SEXP perm_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Z_ref(Z_refSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type perm_mat(perm_matSEXP);
    rcpp_result_gen = Rcpp::wrap(LabelSwitch(Z_ref, Z, perm_mat));
    return rcpp_result_gen;
END_RCPP
}
// GetMeanCI_PW
Rcpp::List GetMeanCI_PW(const std::string dir, const int n_files, const arma::vec time, const int k);
RcppExport SEXP _BayesFPMM_GetMeanCI_PW(SEXP dirSEXP, SEXP n_filesSEXP, SEXP timeSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMeanCI_PW(dir, n_files, time, k));
    return rcpp_result_gen;
END_RCPP
}
// GetMeanCI_S
Rcpp::List GetMeanCI_S(const std::string dir, const int n_files, const arma::vec time, const int k);
RcppExport SEXP _BayesFPMM_GetMeanCI_S(SEXP dirSEXP, SEXP n_filesSEXP, SEXP timeSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMeanCI_S(dir, n_files, time, k));
    return rcpp_result_gen;
END_RCPP
}
// GetCovCI_Pw
Rcpp::List GetCovCI_Pw(const std::string dir, const int n_files, const int n_MCMC, const arma::vec time1, const arma::vec time2, const int l, const int m);
RcppExport SEXP _BayesFPMM_GetCovCI_Pw(SEXP dirSEXP, SEXP n_filesSEXP, SEXP n_MCMCSEXP, SEXP time1SEXP, SEXP time2SEXP, SEXP lSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    Rcpp::traits::input_parameter< const int >::type n_MCMC(n_MCMCSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type time1(time1SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type time2(time2SEXP);
    Rcpp::traits::input_parameter< const int >::type l(lSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(GetCovCI_Pw(dir, n_files, n_MCMC, time1, time2, l, m));
    return rcpp_result_gen;
END_RCPP
}
// GetCovCI_S
Rcpp::List GetCovCI_S(const std::string dir, const int n_files, const int n_MCMC, const arma::vec time1, const arma::vec time2, const int l, const int m);
RcppExport SEXP _BayesFPMM_GetCovCI_S(SEXP dirSEXP, SEXP n_filesSEXP, SEXP n_MCMCSEXP, SEXP time1SEXP, SEXP time2SEXP, SEXP lSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    Rcpp::traits::input_parameter< const int >::type n_MCMC(n_MCMCSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type time1(time1SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type time2(time2SEXP);
    Rcpp::traits::input_parameter< const int >::type l(lSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(GetCovCI_S(dir, n_files, n_MCMC, time1, time2, l, m));
    return rcpp_result_gen;
END_RCPP
}
// GetSigamCI
Rcpp::List GetSigamCI(const std::string dir, const int n_files);
RcppExport SEXP _BayesFPMM_GetSigamCI(SEXP dirSEXP, SEXP n_filesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    rcpp_result_gen = Rcpp::wrap(GetSigamCI(dir, n_files));
    return rcpp_result_gen;
END_RCPP
}
// GetZCI
Rcpp::List GetZCI(const std::string dir, const int n_files);
RcppExport SEXP _BayesFPMM_GetZCI(SEXP dirSEXP, SEXP n_filesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    rcpp_result_gen = Rcpp::wrap(GetZCI(dir, n_files));
    return rcpp_result_gen;
END_RCPP
}
// Model_DIC
double Model_DIC(const std::string dir, const int n_files, const int n_MCMC, const arma::field<arma::vec> time, const arma::field<arma::vec> Y);
RcppExport SEXP _BayesFPMM_Model_DIC(SEXP dirSEXP, SEXP n_filesSEXP, SEXP n_MCMCSEXP, SEXP timeSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    Rcpp::traits::input_parameter< const int >::type n_MCMC(n_MCMCSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(Model_DIC(dir, n_files, n_MCMC, time, Y));
    return rcpp_result_gen;
END_RCPP
}
// Model_AIC
double Model_AIC(const std::string dir, const int n_files, const int n_MCMC, const arma::field<arma::vec> time, const arma::field<arma::vec> Y);
RcppExport SEXP _BayesFPMM_Model_AIC(SEXP dirSEXP, SEXP n_filesSEXP, SEXP n_MCMCSEXP, SEXP timeSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    Rcpp::traits::input_parameter< const int >::type n_MCMC(n_MCMCSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(Model_AIC(dir, n_files, n_MCMC, time, Y));
    return rcpp_result_gen;
END_RCPP
}
// Model_BIC
double Model_BIC(const std::string dir, const int n_files, const int n_MCMC, const arma::field<arma::vec> time, const arma::field<arma::vec> Y);
RcppExport SEXP _BayesFPMM_Model_BIC(SEXP dirSEXP, SEXP n_filesSEXP, SEXP n_MCMCSEXP, SEXP timeSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    Rcpp::traits::input_parameter< const int >::type n_MCMC(n_MCMCSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(Model_BIC(dir, n_files, n_MCMC, time, Y));
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateZ
Rcpp::List TestUpdateZ();
RcppExport SEXP _BayesFPMM_TestUpdateZ() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateZ());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdatePi
Rcpp::List TestUpdatePi();
RcppExport SEXP _BayesFPMM_TestUpdatePi() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdatePi());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdatePhi
Rcpp::List TestUpdatePhi();
RcppExport SEXP _BayesFPMM_TestUpdatePhi() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdatePhi());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateDelta
Rcpp::List TestUpdateDelta();
RcppExport SEXP _BayesFPMM_TestUpdateDelta() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateDelta());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateA
Rcpp::List TestUpdateA();
RcppExport SEXP _BayesFPMM_TestUpdateA() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateA());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateGamma
Rcpp::List TestUpdateGamma();
RcppExport SEXP _BayesFPMM_TestUpdateGamma() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateGamma());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateNu
Rcpp::List TestUpdateNu();
RcppExport SEXP _BayesFPMM_TestUpdateNu() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateNu());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateTau
Rcpp::List TestUpdateTau();
RcppExport SEXP _BayesFPMM_TestUpdateTau() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateTau());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateSigma
Rcpp::List TestUpdateSigma();
RcppExport SEXP _BayesFPMM_TestUpdateSigma() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateSigma());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateChi
Rcpp::List TestUpdateChi();
RcppExport SEXP _BayesFPMM_TestUpdateChi() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateChi());
    return rcpp_result_gen;
END_RCPP
}
// TestReadMat
arma::mat TestReadMat(std::string directory);
RcppExport SEXP _BayesFPMM_TestReadMat(SEXP directorySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type directory(directorySEXP);
    rcpp_result_gen = Rcpp::wrap(TestReadMat(directory));
    return rcpp_result_gen;
END_RCPP
}
// TestReadCube
arma::cube TestReadCube(std::string directory);
RcppExport SEXP _BayesFPMM_TestReadCube(SEXP directorySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type directory(directorySEXP);
    rcpp_result_gen = Rcpp::wrap(TestReadCube(directory));
    return rcpp_result_gen;
END_RCPP
}
// TestReadField
arma::field<arma::cube> TestReadField(std::string directory);
RcppExport SEXP _BayesFPMM_TestReadField(SEXP directorySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type directory(directorySEXP);
    rcpp_result_gen = Rcpp::wrap(TestReadField(directory));
    return rcpp_result_gen;
END_RCPP
}
// GetStuff
Rcpp::List GetStuff(double sigma_sq, const std::string dir, const int n_funct);
RcppExport SEXP _BayesFPMM_GetStuff(SEXP sigma_sqSEXP, SEXP dirSEXP, SEXP n_functSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma_sq(sigma_sqSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_funct(n_functSEXP);
    rcpp_result_gen = Rcpp::wrap(GetStuff(sigma_sq, dir, n_funct));
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateZTempered
Rcpp::List TestUpdateZTempered(const double beta);
RcppExport SEXP _BayesFPMM_TestUpdateZTempered(SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(TestUpdateZTempered(beta));
    return rcpp_result_gen;
END_RCPP
}
// TestUpdatePhiTempered
Rcpp::List TestUpdatePhiTempered(const double beta);
RcppExport SEXP _BayesFPMM_TestUpdatePhiTempered(SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(TestUpdatePhiTempered(beta));
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateNuTempered
Rcpp::List TestUpdateNuTempered(const double beta);
RcppExport SEXP _BayesFPMM_TestUpdateNuTempered(SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(TestUpdateNuTempered(beta));
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateSigmaTempered
Rcpp::List TestUpdateSigmaTempered(const double beta);
RcppExport SEXP _BayesFPMM_TestUpdateSigmaTempered(SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(TestUpdateSigmaTempered(beta));
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateChiTempered
Rcpp::List TestUpdateChiTempered(const double beta);
RcppExport SEXP _BayesFPMM_TestUpdateChiTempered(SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(TestUpdateChiTempered(beta));
    return rcpp_result_gen;
END_RCPP
}
// getparms
void getparms(int n_funct);
RcppExport SEXP _BayesFPMM_getparms(SEXP n_functSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_funct(n_functSEXP);
    getparms(n_funct);
    return R_NilValue;
END_RCPP
}
// TestUpdateZ_PM
Rcpp::List TestUpdateZ_PM();
RcppExport SEXP _BayesFPMM_TestUpdateZ_PM() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdateZ_PM());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdatepi_PM
Rcpp::List TestUpdatepi_PM();
RcppExport SEXP _BayesFPMM_TestUpdatepi_PM() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdatepi_PM());
    return rcpp_result_gen;
END_RCPP
}
// TestUpdatealpha3_PM
Rcpp::List TestUpdatealpha3_PM();
RcppExport SEXP _BayesFPMM_TestUpdatealpha3_PM() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestUpdatealpha3_PM());
    return rcpp_result_gen;
END_RCPP
}
// TestBFPMM
Rcpp::List TestBFPMM(const int tot_mcmc_iters, const int r_stored_iters, const std::string directory, const double sigma_sq);
RcppExport SEXP _BayesFPMM_TestBFPMM(SEXP tot_mcmc_itersSEXP, SEXP r_stored_itersSEXP, SEXP directorySEXP, SEXP sigma_sqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const int >::type r_stored_iters(r_stored_itersSEXP);
    Rcpp::traits::input_parameter< const std::string >::type directory(directorySEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_sq(sigma_sqSEXP);
    rcpp_result_gen = Rcpp::wrap(TestBFPMM(tot_mcmc_iters, r_stored_iters, directory, sigma_sq));
    return rcpp_result_gen;
END_RCPP
}
// TestUpdateTemperedZ_PM
Rcpp::List TestUpdateTemperedZ_PM(double beta);
RcppExport SEXP _BayesFPMM_TestUpdateTemperedZ_PM(SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(TestUpdateTemperedZ_PM(beta));
    return rcpp_result_gen;
END_RCPP
}
// TestEstimateBFPMMTempladder
Rcpp::List TestEstimateBFPMMTempladder(const double beta_N_t, const int N_t);
RcppExport SEXP _BayesFPMM_TestEstimateBFPMMTempladder(SEXP beta_N_tSEXP, SEXP N_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta_N_t(beta_N_tSEXP);
    Rcpp::traits::input_parameter< const int >::type N_t(N_tSEXP);
    rcpp_result_gen = Rcpp::wrap(TestEstimateBFPMMTempladder(beta_N_t, N_t));
    return rcpp_result_gen;
END_RCPP
}
// TestBFPMM_MTT
Rcpp::List TestBFPMM_MTT(const double beta_N_t, const int N_t, const int n_temp_trans, const int tot_mcmc_iters, const int r_stored_iters, const std::string directory, const double sigma_sq);
RcppExport SEXP _BayesFPMM_TestBFPMM_MTT(SEXP beta_N_tSEXP, SEXP N_tSEXP, SEXP n_temp_transSEXP, SEXP tot_mcmc_itersSEXP, SEXP r_stored_itersSEXP, SEXP directorySEXP, SEXP sigma_sqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta_N_t(beta_N_tSEXP);
    Rcpp::traits::input_parameter< const int >::type N_t(N_tSEXP);
    Rcpp::traits::input_parameter< const int >::type n_temp_trans(n_temp_transSEXP);
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const int >::type r_stored_iters(r_stored_itersSEXP);
    Rcpp::traits::input_parameter< const std::string >::type directory(directorySEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_sq(sigma_sqSEXP);
    rcpp_result_gen = Rcpp::wrap(TestBFPMM_MTT(beta_N_t, N_t, n_temp_trans, tot_mcmc_iters, r_stored_iters, directory, sigma_sq));
    return rcpp_result_gen;
END_RCPP
}
// getLikelihood
double getLikelihood();
RcppExport SEXP _BayesFPMM_getLikelihood() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getLikelihood());
    return rcpp_result_gen;
END_RCPP
}
// TestBFPMM_Nu_Z
Rcpp::List TestBFPMM_Nu_Z(const int tot_mcmc_iters, const double sigma_sq, const double beta_N_t, const int N_t, const int n_temp_trans);
RcppExport SEXP _BayesFPMM_TestBFPMM_Nu_Z(SEXP tot_mcmc_itersSEXP, SEXP sigma_sqSEXP, SEXP beta_N_tSEXP, SEXP N_tSEXP, SEXP n_temp_transSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_sq(sigma_sqSEXP);
    Rcpp::traits::input_parameter< const double >::type beta_N_t(beta_N_tSEXP);
    Rcpp::traits::input_parameter< const int >::type N_t(N_tSEXP);
    Rcpp::traits::input_parameter< const int >::type n_temp_trans(n_temp_transSEXP);
    rcpp_result_gen = Rcpp::wrap(TestBFPMM_Nu_Z(tot_mcmc_iters, sigma_sq, beta_N_t, N_t, n_temp_trans));
    return rcpp_result_gen;
END_RCPP
}
// TestBFPMM_Theta
Rcpp::List TestBFPMM_Theta(const int tot_mcmc_iters, const double sigma_sq, const arma::cube Z_samp, const arma::cube nu_samp, double burnin_prop, const int k, const std::string dir);
RcppExport SEXP _BayesFPMM_TestBFPMM_Theta(SEXP tot_mcmc_itersSEXP, SEXP sigma_sqSEXP, SEXP Z_sampSEXP, SEXP nu_sampSEXP, SEXP burnin_propSEXP, SEXP kSEXP, SEXP dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_sq(sigma_sqSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Z_samp(Z_sampSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type nu_samp(nu_sampSEXP);
    Rcpp::traits::input_parameter< double >::type burnin_prop(burnin_propSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    rcpp_result_gen = Rcpp::wrap(TestBFPMM_Theta(tot_mcmc_iters, sigma_sq, Z_samp, nu_samp, burnin_prop, k, dir));
    return rcpp_result_gen;
END_RCPP
}
// TestBFPMM_Nu_Z_multiple_try
Rcpp::List TestBFPMM_Nu_Z_multiple_try(const int tot_mcmc_iters, const double sigma_sq, const double beta_N_t, const int N_t, const int n_temp_trans, const int n_trys, const int k, const std::string dir);
RcppExport SEXP _BayesFPMM_TestBFPMM_Nu_Z_multiple_try(SEXP tot_mcmc_itersSEXP, SEXP sigma_sqSEXP, SEXP beta_N_tSEXP, SEXP N_tSEXP, SEXP n_temp_transSEXP, SEXP n_trysSEXP, SEXP kSEXP, SEXP dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_sq(sigma_sqSEXP);
    Rcpp::traits::input_parameter< const double >::type beta_N_t(beta_N_tSEXP);
    Rcpp::traits::input_parameter< const int >::type N_t(N_tSEXP);
    Rcpp::traits::input_parameter< const int >::type n_temp_trans(n_temp_transSEXP);
    Rcpp::traits::input_parameter< const int >::type n_trys(n_trysSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    rcpp_result_gen = Rcpp::wrap(TestBFPMM_Nu_Z_multiple_try(tot_mcmc_iters, sigma_sq, beta_N_t, N_t, n_temp_trans, n_trys, k, dir));
    return rcpp_result_gen;
END_RCPP
}
// TestBFPMM_MTT_warm_start
Rcpp::List TestBFPMM_MTT_warm_start(const double beta_N_t, const int N_t, const int n_temp_trans, const int tot_mcmc_iters, const int r_stored_iters, const std::string directory, const double sigma_sq, const arma::cube Z_samp, const arma::mat pi_samp, const arma::vec alpha_3_samp, const arma::mat delta_samp, const arma::field<arma::cube> gamma_samp, const arma::field<arma::cube> Phi_samp, const arma::mat A_samp, const arma::cube nu_samp, const arma::mat tau_samp, const arma::vec sigma_samp, const arma::cube chi_samp, const double burnin_prop, const int k, const std::string dir);
RcppExport SEXP _BayesFPMM_TestBFPMM_MTT_warm_start(SEXP beta_N_tSEXP, SEXP N_tSEXP, SEXP n_temp_transSEXP, SEXP tot_mcmc_itersSEXP, SEXP r_stored_itersSEXP, SEXP directorySEXP, SEXP sigma_sqSEXP, SEXP Z_sampSEXP, SEXP pi_sampSEXP, SEXP alpha_3_sampSEXP, SEXP delta_sampSEXP, SEXP gamma_sampSEXP, SEXP Phi_sampSEXP, SEXP A_sampSEXP, SEXP nu_sampSEXP, SEXP tau_sampSEXP, SEXP sigma_sampSEXP, SEXP chi_sampSEXP, SEXP burnin_propSEXP, SEXP kSEXP, SEXP dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta_N_t(beta_N_tSEXP);
    Rcpp::traits::input_parameter< const int >::type N_t(N_tSEXP);
    Rcpp::traits::input_parameter< const int >::type n_temp_trans(n_temp_transSEXP);
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const int >::type r_stored_iters(r_stored_itersSEXP);
    Rcpp::traits::input_parameter< const std::string >::type directory(directorySEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_sq(sigma_sqSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Z_samp(Z_sampSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type pi_samp(pi_sampSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type alpha_3_samp(alpha_3_sampSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type delta_samp(delta_sampSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type gamma_samp(gamma_sampSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type Phi_samp(Phi_sampSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type A_samp(A_sampSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type nu_samp(nu_sampSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type tau_samp(tau_sampSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type sigma_samp(sigma_sampSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type chi_samp(chi_sampSEXP);
    Rcpp::traits::input_parameter< const double >::type burnin_prop(burnin_propSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    rcpp_result_gen = Rcpp::wrap(TestBFPMM_MTT_warm_start(beta_N_t, N_t, n_temp_trans, tot_mcmc_iters, r_stored_iters, directory, sigma_sq, Z_samp, pi_samp, alpha_3_samp, delta_samp, gamma_samp, Phi_samp, A_samp, nu_samp, tau_samp, sigma_samp, chi_samp, burnin_prop, k, dir));
    return rcpp_result_gen;
END_RCPP
}
// TestBSpline
Rcpp::List TestBSpline();
RcppExport SEXP _BayesFPMM_TestBSpline() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(TestBSpline());
    return rcpp_result_gen;
END_RCPP
}
// Z_proposal_density
double Z_proposal_density(const arma::vec& Z, const arma::vec& alpha);
RcppExport SEXP _BayesFPMM_Z_proposal_density(SEXP ZSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(Z_proposal_density(Z, alpha));
    return rcpp_result_gen;
END_RCPP
}
// pi_proposal_density
double pi_proposal_density(const arma::vec& pi, const arma::vec& alpha);
RcppExport SEXP _BayesFPMM_pi_proposal_density(SEXP piSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(pi_proposal_density(pi, alpha));
    return rcpp_result_gen;
END_RCPP
}
// BFPMM_Nu_Z_multiple_try
Rcpp::List BFPMM_Nu_Z_multiple_try(const int tot_mcmc_iters, const int n_try, const int k, const arma::field<arma::vec> Y, const arma::field<arma::vec> time, const int n_funct, const int basis_degree, const int n_eigen, const arma::vec boundary_knots, const arma::vec internal_knots);
RcppExport SEXP _BayesFPMM_BFPMM_Nu_Z_multiple_try(SEXP tot_mcmc_itersSEXP, SEXP n_trySEXP, SEXP kSEXP, SEXP YSEXP, SEXP timeSEXP, SEXP n_functSEXP, SEXP basis_degreeSEXP, SEXP n_eigenSEXP, SEXP boundary_knotsSEXP, SEXP internal_knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const int >::type n_try(n_trySEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const int >::type basis_degree(basis_degreeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_eigen(n_eigenSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type boundary_knots(boundary_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type internal_knots(internal_knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(BFPMM_Nu_Z_multiple_try(tot_mcmc_iters, n_try, k, Y, time, n_funct, basis_degree, n_eigen, boundary_knots, internal_knots));
    return rcpp_result_gen;
END_RCPP
}
// BFPMM_Theta_Est
Rcpp::List BFPMM_Theta_Est(const int tot_mcmc_iters, const arma::cube Z_samp, const arma::cube nu_samp, double burnin_prop, const int k, const arma::field<arma::vec> Y, const arma::field<arma::vec> time, const int n_funct, const int basis_degree, const int n_eigen, const arma::vec boundary_knots, const arma::vec internal_knots);
RcppExport SEXP _BayesFPMM_BFPMM_Theta_Est(SEXP tot_mcmc_itersSEXP, SEXP Z_sampSEXP, SEXP nu_sampSEXP, SEXP burnin_propSEXP, SEXP kSEXP, SEXP YSEXP, SEXP timeSEXP, SEXP n_functSEXP, SEXP basis_degreeSEXP, SEXP n_eigenSEXP, SEXP boundary_knotsSEXP, SEXP internal_knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Z_samp(Z_sampSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type nu_samp(nu_sampSEXP);
    Rcpp::traits::input_parameter< double >::type burnin_prop(burnin_propSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const int >::type basis_degree(basis_degreeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_eigen(n_eigenSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type boundary_knots(boundary_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type internal_knots(internal_knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(BFPMM_Theta_Est(tot_mcmc_iters, Z_samp, nu_samp, burnin_prop, k, Y, time, n_funct, basis_degree, n_eigen, boundary_knots, internal_knots));
    return rcpp_result_gen;
END_RCPP
}
// BFPMM_warm_start
Rcpp::List BFPMM_warm_start(const double beta_N_t, const int N_t, const int n_temp_trans, const int tot_mcmc_iters, const int r_stored_iters, const arma::cube Z_samp, const arma::mat pi_samp, const arma::vec alpha_3_samp, const arma::mat delta_samp, const arma::field<arma::cube> gamma_samp, const arma::field<arma::cube> Phi_samp, const arma::mat A_samp, const arma::cube nu_samp, const arma::mat tau_samp, const arma::vec sigma_samp, const arma::cube chi_samp, const double burnin_prop, const int k, const arma::field<arma::vec> Y, const arma::field<arma::vec> time, const int n_funct, const int basis_degree, const int n_eigen, const arma::vec boundary_knots, const arma::vec internal_knots, const double thinning_num, const std::string dir);
RcppExport SEXP _BayesFPMM_BFPMM_warm_start(SEXP beta_N_tSEXP, SEXP N_tSEXP, SEXP n_temp_transSEXP, SEXP tot_mcmc_itersSEXP, SEXP r_stored_itersSEXP, SEXP Z_sampSEXP, SEXP pi_sampSEXP, SEXP alpha_3_sampSEXP, SEXP delta_sampSEXP, SEXP gamma_sampSEXP, SEXP Phi_sampSEXP, SEXP A_sampSEXP, SEXP nu_sampSEXP, SEXP tau_sampSEXP, SEXP sigma_sampSEXP, SEXP chi_sampSEXP, SEXP burnin_propSEXP, SEXP kSEXP, SEXP YSEXP, SEXP timeSEXP, SEXP n_functSEXP, SEXP basis_degreeSEXP, SEXP n_eigenSEXP, SEXP boundary_knotsSEXP, SEXP internal_knotsSEXP, SEXP thinning_numSEXP, SEXP dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta_N_t(beta_N_tSEXP);
    Rcpp::traits::input_parameter< const int >::type N_t(N_tSEXP);
    Rcpp::traits::input_parameter< const int >::type n_temp_trans(n_temp_transSEXP);
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const int >::type r_stored_iters(r_stored_itersSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Z_samp(Z_sampSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type pi_samp(pi_sampSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type alpha_3_samp(alpha_3_sampSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type delta_samp(delta_sampSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type gamma_samp(gamma_sampSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type Phi_samp(Phi_sampSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type A_samp(A_sampSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type nu_samp(nu_sampSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type tau_samp(tau_sampSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type sigma_samp(sigma_sampSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type chi_samp(chi_sampSEXP);
    Rcpp::traits::input_parameter< const double >::type burnin_prop(burnin_propSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const int >::type basis_degree(basis_degreeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_eigen(n_eigenSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type boundary_knots(boundary_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type internal_knots(internal_knotsSEXP);
    Rcpp::traits::input_parameter< const double >::type thinning_num(thinning_numSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    rcpp_result_gen = Rcpp::wrap(BFPMM_warm_start(beta_N_t, N_t, n_temp_trans, tot_mcmc_iters, r_stored_iters, Z_samp, pi_samp, alpha_3_samp, delta_samp, gamma_samp, Phi_samp, A_samp, nu_samp, tau_samp, sigma_samp, chi_samp, burnin_prop, k, Y, time, n_funct, basis_degree, n_eigen, boundary_knots, internal_knots, thinning_num, dir));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesFPMM_BFPMM", (DL_FUNC) &_BayesFPMM_BFPMM, 26},
    {"_BayesFPMM_BFPMM_Templadder", (DL_FUNC) &_BayesFPMM_BFPMM_Templadder, 26},
    {"_BayesFPMM_BFPMM_MTT", (DL_FUNC) &_BayesFPMM_BFPMM_MTT, 29},
    {"_BayesFPMM_BFPMM_Nu_Z", (DL_FUNC) &_BayesFPMM_BFPMM_Nu_Z, 23},
    {"_BayesFPMM_BFPMM_Theta", (DL_FUNC) &_BayesFPMM_BFPMM_Theta, 25},
    {"_BayesFPMM_BFPMM_MTT_warm_start", (DL_FUNC) &_BayesFPMM_BFPMM_MTT_warm_start, 40},
    {"_BayesFPMM_rdirichlet", (DL_FUNC) &_BayesFPMM_rdirichlet, 1},
    {"_BayesFPMM_calc_lB", (DL_FUNC) &_BayesFPMM_calc_lB, 1},
    {"_BayesFPMM_LabelSwitch", (DL_FUNC) &_BayesFPMM_LabelSwitch, 3},
    {"_BayesFPMM_GetMeanCI_PW", (DL_FUNC) &_BayesFPMM_GetMeanCI_PW, 4},
    {"_BayesFPMM_GetMeanCI_S", (DL_FUNC) &_BayesFPMM_GetMeanCI_S, 4},
    {"_BayesFPMM_GetCovCI_Pw", (DL_FUNC) &_BayesFPMM_GetCovCI_Pw, 7},
    {"_BayesFPMM_GetCovCI_S", (DL_FUNC) &_BayesFPMM_GetCovCI_S, 7},
    {"_BayesFPMM_GetSigamCI", (DL_FUNC) &_BayesFPMM_GetSigamCI, 2},
    {"_BayesFPMM_GetZCI", (DL_FUNC) &_BayesFPMM_GetZCI, 2},
    {"_BayesFPMM_Model_DIC", (DL_FUNC) &_BayesFPMM_Model_DIC, 5},
    {"_BayesFPMM_Model_AIC", (DL_FUNC) &_BayesFPMM_Model_AIC, 5},
    {"_BayesFPMM_Model_BIC", (DL_FUNC) &_BayesFPMM_Model_BIC, 5},
    {"_BayesFPMM_TestUpdateZ", (DL_FUNC) &_BayesFPMM_TestUpdateZ, 0},
    {"_BayesFPMM_TestUpdatePi", (DL_FUNC) &_BayesFPMM_TestUpdatePi, 0},
    {"_BayesFPMM_TestUpdatePhi", (DL_FUNC) &_BayesFPMM_TestUpdatePhi, 0},
    {"_BayesFPMM_TestUpdateDelta", (DL_FUNC) &_BayesFPMM_TestUpdateDelta, 0},
    {"_BayesFPMM_TestUpdateA", (DL_FUNC) &_BayesFPMM_TestUpdateA, 0},
    {"_BayesFPMM_TestUpdateGamma", (DL_FUNC) &_BayesFPMM_TestUpdateGamma, 0},
    {"_BayesFPMM_TestUpdateNu", (DL_FUNC) &_BayesFPMM_TestUpdateNu, 0},
    {"_BayesFPMM_TestUpdateTau", (DL_FUNC) &_BayesFPMM_TestUpdateTau, 0},
    {"_BayesFPMM_TestUpdateSigma", (DL_FUNC) &_BayesFPMM_TestUpdateSigma, 0},
    {"_BayesFPMM_TestUpdateChi", (DL_FUNC) &_BayesFPMM_TestUpdateChi, 0},
    {"_BayesFPMM_TestReadMat", (DL_FUNC) &_BayesFPMM_TestReadMat, 1},
    {"_BayesFPMM_TestReadCube", (DL_FUNC) &_BayesFPMM_TestReadCube, 1},
    {"_BayesFPMM_TestReadField", (DL_FUNC) &_BayesFPMM_TestReadField, 1},
    {"_BayesFPMM_GetStuff", (DL_FUNC) &_BayesFPMM_GetStuff, 3},
    {"_BayesFPMM_TestUpdateZTempered", (DL_FUNC) &_BayesFPMM_TestUpdateZTempered, 1},
    {"_BayesFPMM_TestUpdatePhiTempered", (DL_FUNC) &_BayesFPMM_TestUpdatePhiTempered, 1},
    {"_BayesFPMM_TestUpdateNuTempered", (DL_FUNC) &_BayesFPMM_TestUpdateNuTempered, 1},
    {"_BayesFPMM_TestUpdateSigmaTempered", (DL_FUNC) &_BayesFPMM_TestUpdateSigmaTempered, 1},
    {"_BayesFPMM_TestUpdateChiTempered", (DL_FUNC) &_BayesFPMM_TestUpdateChiTempered, 1},
    {"_BayesFPMM_getparms", (DL_FUNC) &_BayesFPMM_getparms, 1},
    {"_BayesFPMM_TestUpdateZ_PM", (DL_FUNC) &_BayesFPMM_TestUpdateZ_PM, 0},
    {"_BayesFPMM_TestUpdatepi_PM", (DL_FUNC) &_BayesFPMM_TestUpdatepi_PM, 0},
    {"_BayesFPMM_TestUpdatealpha3_PM", (DL_FUNC) &_BayesFPMM_TestUpdatealpha3_PM, 0},
    {"_BayesFPMM_TestBFPMM", (DL_FUNC) &_BayesFPMM_TestBFPMM, 4},
    {"_BayesFPMM_TestUpdateTemperedZ_PM", (DL_FUNC) &_BayesFPMM_TestUpdateTemperedZ_PM, 1},
    {"_BayesFPMM_TestEstimateBFPMMTempladder", (DL_FUNC) &_BayesFPMM_TestEstimateBFPMMTempladder, 2},
    {"_BayesFPMM_TestBFPMM_MTT", (DL_FUNC) &_BayesFPMM_TestBFPMM_MTT, 7},
    {"_BayesFPMM_getLikelihood", (DL_FUNC) &_BayesFPMM_getLikelihood, 0},
    {"_BayesFPMM_TestBFPMM_Nu_Z", (DL_FUNC) &_BayesFPMM_TestBFPMM_Nu_Z, 5},
    {"_BayesFPMM_TestBFPMM_Theta", (DL_FUNC) &_BayesFPMM_TestBFPMM_Theta, 7},
    {"_BayesFPMM_TestBFPMM_Nu_Z_multiple_try", (DL_FUNC) &_BayesFPMM_TestBFPMM_Nu_Z_multiple_try, 8},
    {"_BayesFPMM_TestBFPMM_MTT_warm_start", (DL_FUNC) &_BayesFPMM_TestBFPMM_MTT_warm_start, 21},
    {"_BayesFPMM_TestBSpline", (DL_FUNC) &_BayesFPMM_TestBSpline, 0},
    {"_BayesFPMM_Z_proposal_density", (DL_FUNC) &_BayesFPMM_Z_proposal_density, 2},
    {"_BayesFPMM_pi_proposal_density", (DL_FUNC) &_BayesFPMM_pi_proposal_density, 2},
    {"_BayesFPMM_BFPMM_Nu_Z_multiple_try", (DL_FUNC) &_BayesFPMM_BFPMM_Nu_Z_multiple_try, 10},
    {"_BayesFPMM_BFPMM_Theta_Est", (DL_FUNC) &_BayesFPMM_BFPMM_Theta_Est, 12},
    {"_BayesFPMM_BFPMM_warm_start", (DL_FUNC) &_BayesFPMM_BFPMM_warm_start, 27},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesFPMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
