// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/BayesFPMM.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// GetMeanCI_PW
Rcpp::List GetMeanCI_PW(const std::string dir, const int n_files, const arma::vec time, const int k);
RcppExport SEXP _BayesFPMM_GetMeanCI_PW(SEXP dirSEXP, SEXP n_filesSEXP, SEXP timeSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMeanCI_PW(dir, n_files, time, k));
    return rcpp_result_gen;
END_RCPP
}
// GetMeanCI_S
Rcpp::List GetMeanCI_S(const std::string dir, const int n_files, const arma::vec time, const int k);
RcppExport SEXP _BayesFPMM_GetMeanCI_S(SEXP dirSEXP, SEXP n_filesSEXP, SEXP timeSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMeanCI_S(dir, n_files, time, k));
    return rcpp_result_gen;
END_RCPP
}
// GetCovCI_Pw
Rcpp::List GetCovCI_Pw(const std::string dir, const int n_files, const int n_MCMC, const arma::vec time1, const arma::vec time2, const int l, const int m);
RcppExport SEXP _BayesFPMM_GetCovCI_Pw(SEXP dirSEXP, SEXP n_filesSEXP, SEXP n_MCMCSEXP, SEXP time1SEXP, SEXP time2SEXP, SEXP lSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    Rcpp::traits::input_parameter< const int >::type n_MCMC(n_MCMCSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type time1(time1SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type time2(time2SEXP);
    Rcpp::traits::input_parameter< const int >::type l(lSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(GetCovCI_Pw(dir, n_files, n_MCMC, time1, time2, l, m));
    return rcpp_result_gen;
END_RCPP
}
// GetCovCI_S
Rcpp::List GetCovCI_S(const std::string dir, const int n_files, const int n_MCMC, const arma::vec time1, const arma::vec time2, const int l, const int m);
RcppExport SEXP _BayesFPMM_GetCovCI_S(SEXP dirSEXP, SEXP n_filesSEXP, SEXP n_MCMCSEXP, SEXP time1SEXP, SEXP time2SEXP, SEXP lSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    Rcpp::traits::input_parameter< const int >::type n_MCMC(n_MCMCSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type time1(time1SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type time2(time2SEXP);
    Rcpp::traits::input_parameter< const int >::type l(lSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(GetCovCI_S(dir, n_files, n_MCMC, time1, time2, l, m));
    return rcpp_result_gen;
END_RCPP
}
// GetSigmaCI
Rcpp::List GetSigmaCI(const std::string dir, const int n_files);
RcppExport SEXP _BayesFPMM_GetSigmaCI(SEXP dirSEXP, SEXP n_filesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    rcpp_result_gen = Rcpp::wrap(GetSigmaCI(dir, n_files));
    return rcpp_result_gen;
END_RCPP
}
// GetZCI
Rcpp::List GetZCI(const std::string dir, const int n_files);
RcppExport SEXP _BayesFPMM_GetZCI(SEXP dirSEXP, SEXP n_filesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    rcpp_result_gen = Rcpp::wrap(GetZCI(dir, n_files));
    return rcpp_result_gen;
END_RCPP
}
// Model_DIC
double Model_DIC(const std::string dir, const int n_files, const int n_MCMC, const arma::field<arma::vec> time, const arma::field<arma::vec> Y);
RcppExport SEXP _BayesFPMM_Model_DIC(SEXP dirSEXP, SEXP n_filesSEXP, SEXP n_MCMCSEXP, SEXP timeSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    Rcpp::traits::input_parameter< const int >::type n_MCMC(n_MCMCSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(Model_DIC(dir, n_files, n_MCMC, time, Y));
    return rcpp_result_gen;
END_RCPP
}
// Model_AIC
double Model_AIC(const std::string dir, const int n_files, const int n_MCMC, const arma::field<arma::vec> time, const arma::field<arma::vec> Y);
RcppExport SEXP _BayesFPMM_Model_AIC(SEXP dirSEXP, SEXP n_filesSEXP, SEXP n_MCMCSEXP, SEXP timeSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    Rcpp::traits::input_parameter< const int >::type n_MCMC(n_MCMCSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(Model_AIC(dir, n_files, n_MCMC, time, Y));
    return rcpp_result_gen;
END_RCPP
}
// Model_BIC
double Model_BIC(const std::string dir, const int n_files, const int n_MCMC, const arma::field<arma::vec> time, const arma::field<arma::vec> Y);
RcppExport SEXP _BayesFPMM_Model_BIC(SEXP dirSEXP, SEXP n_filesSEXP, SEXP n_MCMCSEXP, SEXP timeSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const int >::type n_files(n_filesSEXP);
    Rcpp::traits::input_parameter< const int >::type n_MCMC(n_MCMCSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(Model_BIC(dir, n_files, n_MCMC, time, Y));
    return rcpp_result_gen;
END_RCPP
}
// BFPMM_Nu_Z_multiple_try
Rcpp::List BFPMM_Nu_Z_multiple_try(const int tot_mcmc_iters, const int n_try, const int k, const arma::field<arma::vec> Y, const arma::field<arma::vec> time, const int n_funct, const int basis_degree, const int n_eigen, const arma::vec boundary_knots, const arma::vec internal_knots);
RcppExport SEXP _BayesFPMM_BFPMM_Nu_Z_multiple_try(SEXP tot_mcmc_itersSEXP, SEXP n_trySEXP, SEXP kSEXP, SEXP YSEXP, SEXP timeSEXP, SEXP n_functSEXP, SEXP basis_degreeSEXP, SEXP n_eigenSEXP, SEXP boundary_knotsSEXP, SEXP internal_knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const int >::type n_try(n_trySEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const int >::type basis_degree(basis_degreeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_eigen(n_eigenSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type boundary_knots(boundary_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type internal_knots(internal_knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(BFPMM_Nu_Z_multiple_try(tot_mcmc_iters, n_try, k, Y, time, n_funct, basis_degree, n_eigen, boundary_knots, internal_knots));
    return rcpp_result_gen;
END_RCPP
}
// BFPMM_Theta_Est
Rcpp::List BFPMM_Theta_Est(const int tot_mcmc_iters, const arma::cube Z_samp, const arma::cube nu_samp, double burnin_prop, const int k, const arma::field<arma::vec> Y, const arma::field<arma::vec> time, const int n_funct, const int basis_degree, const int n_eigen, const arma::vec boundary_knots, const arma::vec internal_knots);
RcppExport SEXP _BayesFPMM_BFPMM_Theta_Est(SEXP tot_mcmc_itersSEXP, SEXP Z_sampSEXP, SEXP nu_sampSEXP, SEXP burnin_propSEXP, SEXP kSEXP, SEXP YSEXP, SEXP timeSEXP, SEXP n_functSEXP, SEXP basis_degreeSEXP, SEXP n_eigenSEXP, SEXP boundary_knotsSEXP, SEXP internal_knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Z_samp(Z_sampSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type nu_samp(nu_sampSEXP);
    Rcpp::traits::input_parameter< double >::type burnin_prop(burnin_propSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const int >::type basis_degree(basis_degreeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_eigen(n_eigenSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type boundary_knots(boundary_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type internal_knots(internal_knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(BFPMM_Theta_Est(tot_mcmc_iters, Z_samp, nu_samp, burnin_prop, k, Y, time, n_funct, basis_degree, n_eigen, boundary_knots, internal_knots));
    return rcpp_result_gen;
END_RCPP
}
// BFPMM_warm_start
Rcpp::List BFPMM_warm_start(const double beta_N_t, const int N_t, const int n_temp_trans, const int tot_mcmc_iters, const int r_stored_iters, const arma::cube Z_samp, const arma::mat pi_samp, const arma::vec alpha_3_samp, const arma::mat delta_samp, const arma::field<arma::cube> gamma_samp, const arma::field<arma::cube> Phi_samp, const arma::mat A_samp, const arma::cube nu_samp, const arma::mat tau_samp, const arma::vec sigma_samp, const arma::cube chi_samp, const double burnin_prop, const int k, const arma::field<arma::vec> Y, const arma::field<arma::vec> time, const int n_funct, const int basis_degree, const int n_eigen, const arma::vec boundary_knots, const arma::vec internal_knots, const double thinning_num, const std::string dir);
RcppExport SEXP _BayesFPMM_BFPMM_warm_start(SEXP beta_N_tSEXP, SEXP N_tSEXP, SEXP n_temp_transSEXP, SEXP tot_mcmc_itersSEXP, SEXP r_stored_itersSEXP, SEXP Z_sampSEXP, SEXP pi_sampSEXP, SEXP alpha_3_sampSEXP, SEXP delta_sampSEXP, SEXP gamma_sampSEXP, SEXP Phi_sampSEXP, SEXP A_sampSEXP, SEXP nu_sampSEXP, SEXP tau_sampSEXP, SEXP sigma_sampSEXP, SEXP chi_sampSEXP, SEXP burnin_propSEXP, SEXP kSEXP, SEXP YSEXP, SEXP timeSEXP, SEXP n_functSEXP, SEXP basis_degreeSEXP, SEXP n_eigenSEXP, SEXP boundary_knotsSEXP, SEXP internal_knotsSEXP, SEXP thinning_numSEXP, SEXP dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta_N_t(beta_N_tSEXP);
    Rcpp::traits::input_parameter< const int >::type N_t(N_tSEXP);
    Rcpp::traits::input_parameter< const int >::type n_temp_trans(n_temp_transSEXP);
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const int >::type r_stored_iters(r_stored_itersSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Z_samp(Z_sampSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type pi_samp(pi_sampSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type alpha_3_samp(alpha_3_sampSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type delta_samp(delta_sampSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type gamma_samp(gamma_sampSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube> >::type Phi_samp(Phi_sampSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type A_samp(A_sampSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type nu_samp(nu_sampSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type tau_samp(tau_sampSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type sigma_samp(sigma_sampSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type chi_samp(chi_sampSEXP);
    Rcpp::traits::input_parameter< const double >::type burnin_prop(burnin_propSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const int >::type basis_degree(basis_degreeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_eigen(n_eigenSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type boundary_knots(boundary_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type internal_knots(internal_knotsSEXP);
    Rcpp::traits::input_parameter< const double >::type thinning_num(thinning_numSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dir(dirSEXP);
    rcpp_result_gen = Rcpp::wrap(BFPMM_warm_start(beta_N_t, N_t, n_temp_trans, tot_mcmc_iters, r_stored_iters, Z_samp, pi_samp, alpha_3_samp, delta_samp, gamma_samp, Phi_samp, A_samp, nu_samp, tau_samp, sigma_samp, chi_samp, burnin_prop, k, Y, time, n_funct, basis_degree, n_eigen, boundary_knots, internal_knots, thinning_num, dir));
    return rcpp_result_gen;
END_RCPP
}
// ReadVec
arma::vec ReadVec(std::string file);
RcppExport SEXP _BayesFPMM_ReadVec(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(ReadVec(file));
    return rcpp_result_gen;
END_RCPP
}
// ReadMat
arma::mat ReadMat(std::string file);
RcppExport SEXP _BayesFPMM_ReadMat(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(ReadMat(file));
    return rcpp_result_gen;
END_RCPP
}
// ReadCube
arma::cube ReadCube(std::string file);
RcppExport SEXP _BayesFPMM_ReadCube(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(ReadCube(file));
    return rcpp_result_gen;
END_RCPP
}
// ReadFieldCube
arma::field<arma::cube> ReadFieldCube(std::string file);
RcppExport SEXP _BayesFPMM_ReadFieldCube(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(ReadFieldCube(file));
    return rcpp_result_gen;
END_RCPP
}
// ReadFieldMat
arma::field<arma::mat> ReadFieldMat(std::string file);
RcppExport SEXP _BayesFPMM_ReadFieldMat(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(ReadFieldMat(file));
    return rcpp_result_gen;
END_RCPP
}
// ReadFieldVec
arma::field<arma::vec> ReadFieldVec(std::string file);
RcppExport SEXP _BayesFPMM_ReadFieldVec(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(ReadFieldVec(file));
    return rcpp_result_gen;
END_RCPP
}
// BMFPMM_Nu_Z_multiple_try
Rcpp::List BMFPMM_Nu_Z_multiple_try(const int tot_mcmc_iters, const int n_try, const int k, const arma::field<arma::vec> Y, const arma::field<arma::mat> time, const int n_funct, const arma::vec basis_degree, const int n_eigen, const arma::mat boundary_knots, const arma::field<arma::vec> internal_knots);
RcppExport SEXP _BayesFPMM_BMFPMM_Nu_Z_multiple_try(SEXP tot_mcmc_itersSEXP, SEXP n_trySEXP, SEXP kSEXP, SEXP YSEXP, SEXP timeSEXP, SEXP n_functSEXP, SEXP basis_degreeSEXP, SEXP n_eigenSEXP, SEXP boundary_knotsSEXP, SEXP internal_knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const int >::type n_try(n_trySEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type basis_degree(basis_degreeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_eigen(n_eigenSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type boundary_knots(boundary_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type internal_knots(internal_knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(BMFPMM_Nu_Z_multiple_try(tot_mcmc_iters, n_try, k, Y, time, n_funct, basis_degree, n_eigen, boundary_knots, internal_knots));
    return rcpp_result_gen;
END_RCPP
}
// BMFPMM_Theta_Est
Rcpp::List BMFPMM_Theta_Est(const int tot_mcmc_iters, const arma::cube Z_samp, const arma::cube nu_samp, double burnin_prop, const int k, const arma::field<arma::vec> Y, const arma::field<arma::mat> time, const int n_funct, const arma::vec basis_degree, const int n_eigen, const arma::mat boundary_knots, const arma::field<arma::vec> internal_knots);
RcppExport SEXP _BayesFPMM_BMFPMM_Theta_Est(SEXP tot_mcmc_itersSEXP, SEXP Z_sampSEXP, SEXP nu_sampSEXP, SEXP burnin_propSEXP, SEXP kSEXP, SEXP YSEXP, SEXP timeSEXP, SEXP n_functSEXP, SEXP basis_degreeSEXP, SEXP n_eigenSEXP, SEXP boundary_knotsSEXP, SEXP internal_knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type tot_mcmc_iters(tot_mcmc_itersSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Z_samp(Z_sampSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type nu_samp(nu_sampSEXP);
    Rcpp::traits::input_parameter< double >::type burnin_prop(burnin_propSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_funct(n_functSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type basis_degree(basis_degreeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_eigen(n_eigenSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type boundary_knots(boundary_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type internal_knots(internal_knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(BMFPMM_Theta_Est(tot_mcmc_iters, Z_samp, nu_samp, burnin_prop, k, Y, time, n_funct, basis_degree, n_eigen, boundary_knots, internal_knots));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_BayesFPMM_GetMeanCI_PW", (DL_FUNC) &_BayesFPMM_GetMeanCI_PW, 4},
    {"_BayesFPMM_GetMeanCI_S", (DL_FUNC) &_BayesFPMM_GetMeanCI_S, 4},
    {"_BayesFPMM_GetCovCI_Pw", (DL_FUNC) &_BayesFPMM_GetCovCI_Pw, 7},
    {"_BayesFPMM_GetCovCI_S", (DL_FUNC) &_BayesFPMM_GetCovCI_S, 7},
    {"_BayesFPMM_GetSigmaCI", (DL_FUNC) &_BayesFPMM_GetSigmaCI, 2},
    {"_BayesFPMM_GetZCI", (DL_FUNC) &_BayesFPMM_GetZCI, 2},
    {"_BayesFPMM_Model_DIC", (DL_FUNC) &_BayesFPMM_Model_DIC, 5},
    {"_BayesFPMM_Model_AIC", (DL_FUNC) &_BayesFPMM_Model_AIC, 5},
    {"_BayesFPMM_Model_BIC", (DL_FUNC) &_BayesFPMM_Model_BIC, 5},
    {"_BayesFPMM_BFPMM_Nu_Z_multiple_try", (DL_FUNC) &_BayesFPMM_BFPMM_Nu_Z_multiple_try, 10},
    {"_BayesFPMM_BFPMM_Theta_Est", (DL_FUNC) &_BayesFPMM_BFPMM_Theta_Est, 12},
    {"_BayesFPMM_BFPMM_warm_start", (DL_FUNC) &_BayesFPMM_BFPMM_warm_start, 27},
    {"_BayesFPMM_ReadVec", (DL_FUNC) &_BayesFPMM_ReadVec, 1},
    {"_BayesFPMM_ReadMat", (DL_FUNC) &_BayesFPMM_ReadMat, 1},
    {"_BayesFPMM_ReadCube", (DL_FUNC) &_BayesFPMM_ReadCube, 1},
    {"_BayesFPMM_ReadFieldCube", (DL_FUNC) &_BayesFPMM_ReadFieldCube, 1},
    {"_BayesFPMM_ReadFieldMat", (DL_FUNC) &_BayesFPMM_ReadFieldMat, 1},
    {"_BayesFPMM_ReadFieldVec", (DL_FUNC) &_BayesFPMM_ReadFieldVec, 1},
    {"_BayesFPMM_BMFPMM_Nu_Z_multiple_try", (DL_FUNC) &_BayesFPMM_BMFPMM_Nu_Z_multiple_try, 10},
    {"_BayesFPMM_BMFPMM_Theta_Est", (DL_FUNC) &_BayesFPMM_BMFPMM_Theta_Est, 12},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesFPMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
